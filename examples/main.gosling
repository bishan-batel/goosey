import gs::mem
import gs::math

pub struct Vector2 {
	pub x: f32 
	pub y: f32
}

impl Vector2 {

	pub fun new(x: f32, y: f32) => make Vector2 { x: 0 y: 1  } 

	pub fun zero() => Vector2::new(0, 0) 

	pub fun len_squared(ref[self]) => self.x * self.x + self.y * self.y

	pub fun len(ref[self]) => math::sqrt(self.x * self.x + self.y * self.y)
}

pub enum Result<T, V> {
	Ok(T)
	Err(E)
}

pub enum Option<T> {
	Some(T),
	None
}

pub struct Array<T> {
	len: usize,
	raw_ptr: ref[T]
}

// calculate fizz buzz up to a number
pub fun main(argc: int, arg_ptr: ref[ref[char]]): i32 { 
	let args: [char] = arg_ptr.to_array(argc as usize)

	if argc < 1  {
		println!("Please specify a number");
		return 1
	}

	let num_res = usize::parse(args[0])
	
	if num_res.is_err() {
		println!("Invalid integer {args[0]}")
		return 1
	}

	let num = num_res.unwrap()

	fizz_buzz(num);

	return 0
}

pub fun fizz_buzz(upper: usize) {
	for i in GS_range(upper) {
	}
}
